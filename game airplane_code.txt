//#define STB_IMAGE_IMPLEMENTATION
#include<windows.h>
#include <GL/glut.h>
#include <iostream>
//#include<irrKlang.h>
#include <gl/stb_image.h>
using namespace std;
//using namespace irrklang;
//#pragma comment(lib, "irrKlang.lib")
//ISoundEngine *sound = createIrrKlangDevice();
GLfloat light_ambient[] = { 0.10f, 0.10f, 0.0f, 1.0f },
light_diffuse[] = { 3.0f, 2.0f, 2.0f, 1.0f },
light_specular[] = { 10.0f, 10.0f, 5.0f, 5.0f },
light_position[] = { 10.0f, 10.0f, 10.0f, 0.0f },

mat_ambient[] = { 0.7f, 0.7f, 0.7f, .7f },
mat_diffuse[] = { 0.8f, 0.8f, 0.8f, 1.0f },
mat_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f },
high_shininess[] = { 100.0f };

////////////floating ///////////////
float max_time = 0;
float artio;
float zoom = 4;
float traX = 0, traY = 0, traZ = -8;
float traZ1 = -20, traZ2 = -40, traZ3 = -60, traZ4 = -80, traZ5 = -100, traZ6 = -120;
float rtX = 0, rtY = 0, rtZ = 0, rt = 0.2;
float speed = 0;
float ptx[7] = { -1,1,4,-5,0,5,-3 };
float pty[7] = { 5,4,10,6,3,7,1 };
/////////////////integer////////////////////
int time = 1;
int scor = 0, scor1 = 0;
int mod, number = 0;
/////////////////boolean///////////////////////
bool b = true;
bool v1 = true, v2 = true, v3 = true, v4 = true, v5 = true, v6 = true, v = true;
//////////////////////function///////////////////////////////
GLfloat xRotated, yRotated, zRotated;
GLdouble radius = 1;
/////////////reshape current window////////////////////////////////
void reshape(int w, int h)
{
	if (h == 0) h = 1;
	artio = (float)w / (float)h;

	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(50, artio, 1, 1000.0);
	glMatrixMode(GL_MODELVIEW);

}

/////////////////draw the ground////////////
void Ground()
{
	if (traX >= 5.1)traX = 5.1;
	if (traX <= -5.1)traX = -5.1;
	if (traY>0.1)traY = 0.1;
	if (traY<-11)traY = -11;

	glColor3d(0.1, 0.2, 0.2);
	glPushMatrix();
	glTranslated(0, -52, 0);
	glScaled(400, 0, 4000);
	glutSolidCube(1);
	glPopMatrix();

}
///////////////draw circles///////////////////
void circles(int n) {

	glColor3d(1, 0.1, 0.1);
	glPushMatrix();
	glTranslated(ptx[n], pty[n], 0);
	glScaled(0.2, 0.2, 0.2);
	glutSolidTorus(0.5, 5, 40, 10);
	glPopMatrix();

}
void circles1(int n) {

	glColor3d(0, 0.4, 0.2);
	glPushMatrix();
	glTranslated(ptx[n], pty[n], 0);
	glScaled(0.2, 0.2, 0.2);
	glutSolidTorus(0.5, 5, 40, 10);
	glPopMatrix();


}
/////////////////////display text and scor and time//////////////
void text(char* str, int x, int y, int z)
{
	char *c;
	glPushMatrix();
	glColor3f(0, 0, 0);
	glTranslatef(x - 8, y + 8, z);
	glScalef(0.002f, 0.002f, z);

	for (c = str; *c != '\0'; c++)
	{
		glutStrokeCharacter(GLUT_STROKE_MONO_ROMAN, *c);
	}
	glPopMatrix();
}
void time_scor(char c, float x, float y, float z)
{
	glPushMatrix();
	glColor3f(0, 0, 0);
	glTranslatef(x - 8, y + 8, z);
	glScalef(0.002f, 0.002f, z);
	glutStrokeCharacter(GLUT_STROKE_MONO_ROMAN, c);
	glPopMatrix();
}

///////////////////draw airplan///////////////////////
void airplane()
{

	//////body/////////
	glColor3d(0.3, 0, 0);
	glPushMatrix();
	glTranslated(0, 0, 0);
	glScaled(2.5, 0.3, 0.4);
	glutSolidSphere(1, 30, 30);
	glPopMatrix();

	glColor3d(0, 0, 0);
	glPushMatrix();
	glTranslated(1.2, 0.1, 0);
	glScaled(1.3, 0.6, 0.7);
	glRotated(40, 0, 1, 0);
	glutSolidSphere(0.45, 30, 30);
	glPopMatrix();



	///////wing Right/////////////
	glColor3d(0, 0.1, 0.3);
	glPushMatrix();
	glTranslated(0, 0, 1);
	glRotated(-50, 0, 1, 0);
	glScaled(0.6, 0.1, 2);
	glRotated(25, 0, 1, 0);
	glutSolidCube(1);
	glPopMatrix();

	////////////wing Left/////////
	glColor3d(0, 0.1, 0.3);
	glPushMatrix();
	glTranslated(0, 0, -1);
	glRotated(50, 0, 1, 0);
	glScaled(0.6, 0.1, 2);
	glRotated(-25, 0, 1, 0);
	glutSolidCube(1);
	glPopMatrix();

	//////////////////wing back/////////////
	glPushMatrix();
	glTranslated(-2.8, 0, 0);
	glScaled(0.7, 0.4, 0.2);

	//////////////Right/////////////
	glColor3d(0, 0.1, 0.3);
	glPushMatrix();
	glTranslated(0.4, 0, 1.5);
	glRotated(-30, 0, 1, 0);
	glScaled(0.6, 0.1, 2);
	glRotated(10, 0, 1, 0);
	glutSolidCube(1);
	glPopMatrix();

	////////////left//////////////////
	glColor3d(0, 0.1, 0.3);
	glPushMatrix();
	glTranslated(0.4, 0, -1.5);
	glRotated(30, 0, 1, 0);
	glScaled(0.6, 0.1, 2);
	glRotated(-10, 0, 1, 0);
	glutSolidCube(1);
	glPopMatrix();
	glPopMatrix();

	/////////up wing//////////////
	glColor3d(0, 0.1, 0.3);
	glPushMatrix();
	glTranslated(-2.2, 0.3, 0);
	glRotated(45, 0, 0, 1);
	glScaled(0.8, 1.2, 0.1);
	glRotated(-20, 0, 0, 1);
	glutSolidCube(0.5);
	glPopMatrix();
}


/////////////////control and draw airplan and circles/////////////
void draw()
{




	//////////////////////airPlane////////////////////////
	glPushMatrix();
	glTranslated(0, 1, 0);
	glRotated(90, 0, 1, 0);
	glRotated(5, 0, 0, 1);
	glRotated(rtX, 1, 0, 0);
	glRotated(rtY, 0, 1, 0);
	glRotated(rtZ, 0, 0, 1);
	glScaled(0.4, 0.4, 0.4);
	airplane();
	glPopMatrix();

	if (rtX>0)rtX -= rt;
	if (rtX<0)rtX += rt;
	if (rtY>0)rtY -= rt;
	if (rtY<0)rtY += rt;
	if (rtZ>0)rtZ -= rt;
	if (rtZ<0)rtZ += rt;

	if (rtX>15)rtX = 15;
	if (rtX<-15)rtX = -15;
	if (rtZ>15)rtZ = 15;
	if (rtZ<-20)rtZ = -20;



	///// //////////////circles///////////////////
	//////////////v///////////////////
	if ((traX >= 0.5 && traX <= 1.5) && (traY >= -4.5 && traY <= -3.5) && (traZ6 >= 16 && traZ6<17))
	{
		v = false;
		scor += 1;
		max_time += 0.5;
		//sound->play2D("bleep.mp3", GL_TRUE);

	}

	///////////v1//////////////
	if ((traX >= -1.5 && traX <= -0.5) && (traY >= -3.5 && traY <= -2.5) && (traZ6 >= -102 && traZ6<-101))
	{
		v1 = false;
		scor += 1;
		max_time += 0.5;
	}

	/////////v2///////
	if ((traX >= -4.5&& traX <= -3.5) && (traY >= -9.5 && traY <= -8.5) && (traZ6 >= -84 && traZ6<-83))
	{
		v2 = false;
		scor += 1;
		max_time += 0.5;

	}
	///////v3/////////
	if ((traX >= 4.5&& traX <= 5.5) && (traY >= -5.5 && traY <= -4.5) && (traZ6 >= -61 && traZ6<-60))
	{
		v3 = false;
		scor += 1;
		max_time += 0.5;


	}
	///////v4///////
	if ((traX >= -0.5&& traX <= 0.5) && (traY >= -2.5 && traY <= -1.5) && (traZ6 >= -39 && traZ6<-38))
	{
		v4 = false;
		scor += 1;
		max_time += 0.5;

	}
	///////v5//////
	if ((traX >= -5.5&& traX <= -4.5) && (traY <= -5.5 &&traY >= -6.5) && (traZ6 >= -21 && traZ6<-20))
	{
		v5 = false;
		scor += 1;
		max_time += 0.5;
	}
	///////v6/////

	if ((traX >= 2.5&& traX <= 4) && (traY <= 0.1 &&traY >= -0.5) && (traZ6 >= -3 && traZ6<-2))
	{
		v6 = false;
		scor += 1;
		max_time += 0.5;

	}

	glPushMatrix();
	glTranslated(traX, traY, traZ);
	if (v)
		circles(0);
	else
		circles1(0);
	glPopMatrix();

	glPushMatrix();
	glTranslated(traX, traY, traZ1);
	if (v1)
		circles(1);
	else
		circles1(1);
	glPopMatrix();

	glPushMatrix();
	glTranslated(traX, traY, traZ2);
	if (v2)
		circles(2);
	else
		circles1(2);
	glPopMatrix();

	glPushMatrix();
	glTranslated(traX, traY, traZ3);
	if (v3)
		circles(3);
	else
		circles1(3);
	glPopMatrix();

	glPushMatrix();
	glTranslated(traX, traY, traZ4);
	if (v4)
		circles(4);
	else
		circles1(4);
	glPopMatrix();

	glPushMatrix();
	glTranslated(traX, traY, traZ5);
	if (v5)
		circles(5);
	else
		circles1(5);
	glPopMatrix();

	glPushMatrix();
	glTranslated(traX, traY, traZ6);
	if (v6)
		circles(6);
	else
		circles1(6);
	glPopMatrix();

	traZ += speed;
	traZ1 += speed;
	traZ2 += speed;
	traZ3 += speed;
	traZ4 += speed;
	traZ5 += speed;
	traZ6 += speed;

	if (traZ >= 20)traZ = -110;
	if (traZ1 >= 20)traZ1 = -110;
	if (traZ2 >= 20)traZ2 = -110;
	if (traZ3 >= 20)traZ3 = -110;
	if (traZ4 >= 20)traZ4 = -110;
	if (traZ5 >= 20)traZ5 = -110;
	if (traZ6 >= 20)traZ6 = -110;



	if (time > (40 + (max_time / 5)))
	{
		speed = 0;
		b = false;

	}
	else
		speed += 0.0002;




	if (speed >= 0.2)speed = 0.2;


}


static void display(void)

{
	const double t = glutGet(GLUT_ELAPSED_TIME) / 1000.0;
	time = t;


	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glLoadIdentity();


	gluLookAt(0.0, 4.5, 10.0,
		0, 4, 0,
		0, 1.0f, 0.0f);

	//////Ground///////
	Ground();

	glPushMatrix();
	glTranslated(0, 0, 0);
	glScaled(zoom, zoom, zoom);
	draw();
	glPopMatrix();

	cout << max_time << endl;
	if (scor % (7 * 5) == 0)
	{
		v = true;
		v1 = true;
		v2 = true;
		v3 = true;
		v4 = true;
		v5 = true;
		v6 = true;

	}
	if (scor / 5 == 10)
	{
		scor1 += 5;
		scor = 0;

	}

	if (b)
	{
		text("SCOR: ", 8, 0, 0);
		text("TIME: ", 3, 0, 0);
	}
	else
	{
		text("Game Over", 3, 0, 0);
		text("SCOR: ", 8, 0, 0);
		time_scor((scor1 / 5) + 48, 9, 0, 0);
		time_scor((scor / 5) + 48, 9.2, 0, 0);
	}

	while (time) {
		mod = time % 10;
		number = number * 10 + mod;
		time /= 10;

	}
	float tmp = 0;
	while (number) {
		mod = number % 10;

		if (b)
		{
			time_scor(mod + 48, 4 + tmp, 0, 0);
			time_scor((scor1 / 5) + 48, 9, 0, 0);
			time_scor((scor / 5) + 48, 9.2, 0, 0);

		}
		number /= 10;
		tmp += 0.2;
	}




	glutSwapBuffers();
}


static void keyboard(unsigned char key, int x, int y)
{

	float frac = 0.5;
	float rotFrac = 1;
	switch (key)
	{
	case 27:
	case 'q':
		exit(0);
		break;
	case 'z':
		zoom += 0.05;
		break;
	case 'x':
		zoom -= 0.05;
	case 'w':
		traY -= frac;
		rtZ += rotFrac;
		break;
	case 's':
		traY += frac;
		rtZ -= rotFrac;
		break;
	case 'a':
		traX += frac;
		rtX -= rotFrac * 3;
		rtY += rotFrac / 2;
		break;
	case 'd':
		traX -= frac;
		rtX += rotFrac * 3;
		rtY -= rotFrac / 2;
		break;
	}

	glutPostRedisplay();
}


static void idle(void)
{
	glutPostRedisplay();
}

int main(int argc, char *argv[])
{
	glutInit(&argc, argv);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(1366, 720);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH | GLUT_RGBA);

	glutCreateWindow("game plan");

	glutReshapeFunc(reshape);
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutIdleFunc(idle);



	glClearColor(0, 0.5, 0.9, 1);
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);

	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LESS);

	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);



	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);

	glutMainLoop();

	return EXIT_SUCCESS;
}